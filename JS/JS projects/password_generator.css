*,
*::before,
*::after{
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

:root {

    --dk-violet: hsl(268, 75%, 9%);
    --lt-violet: hsl(268, 47%, 21%);
    --lt-violet2: hsl(281, 89%, 26%);
    --vb-violet: hsl(285, 91%, 52%);
    --vb-violet2: hsl(290, 70%, 36%);
  
    --vb-yellow: hsl(52, 100%, 62%);
  
  
    --pl-white: hsl(0, 0%, 100%);
  
    --vb-cyan: hsl(176, 100%, 44%);
    --vb-cyan2: hsl(177, 92%, 70%);
    --dk-text: hsl(198, 20%, 13%);
}

body{
    width: 100vw;
    height: 100vh;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    background: linear-gradient(231deg, rgba(22, 6, 40, 1) 0%, rgba(52, 28, 79, 1) 50%, rgba(88, 7, 125, 1) 100%);
}

.container{
    width: 90%;
    max-width: 450px;
}

h1{
    color: var(--pl-white);
    opacity: 0.75;
    text-transform: uppercase;
    letter-spacing: 2px;
    line-height: 1.2;
    text-align: center;
}

.display_container{
    position: relative;
    background-color: var(--dk-violet);
    border-radius: 1rem;
    border-bottom: 0.35rem solid var(--lt-violet2);
    margin: 1rem 0;
    padding-top: 0.35rem;
}

.display{
    width: 100%;
    background-color: transparent;
    padding: 1.15rem 1rem;
    color: var(--vb-yellow);
    font-weight: 600;
    font-size: 1.5rem;
    line-height: 30px;
    letter-spacing: 1px;
    padding-right: 3.25rem;
    border:none;
}

.display::placeholder{
    position: absolute;
    top: 50%;
    left: 1.5rem;
    font-size: 1.5rem;
    line-height: 30px;
    color: var(--vb-yellow);
    opacity: 0.65;
    text-transform: uppercase;
    transform: translateY(-50%);
}

.display_container button{
    position: absolute;
    top: 50%;
    right: 1.5rem;
    transform: translateY(-50%);
}

.input-container{
    width: 100%;
    background-color: var(--dk-violet);
    padding: 2rem;
    border-radius: 1rem;
    border-bottom: 0.35rem solid var(--lt-violet2);
}

.length-container{
    display: flex;
    justify-content: space-between;
    align-items: center;
}

.length-container p:nth-child(1){
    color: var(--pl-white);
    font-size: 1.5rem;
}

.length-container p:nth-child(2){
    color: var(--vb-yellow);
    font-size: 1.5rem;
}

.strength-container{
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-top: 1.75rem;
    margin-bottom: 2rem;
}

.strength-container p{
    color: var(--pl-white);
    font-size: 1.5rem;
}

.indicator{
    width: 1.5rem;
    height: 1.5rem;
    border-radius: 50%;
}

.generateBtn {
    width: 100%;
    padding: 1rem 0;
    background-color: var(--vb-violet);
    text-align: center;
    border-radius: 0.75rem;
    border-bottom: 0.35rem solid var(--vb-yellow);
    text-transform: uppercase;
    letter-spacing: 1px;
    color: var(--vb-yellow);
    font-weight: 600;
    font-size: 1.25rem;
}

.check{
    display: flex;
    align-items: center;
    margin: 1rem 0;
    gap: 0 1rem;
}

.check input{
    appearance: none ;
    width: 20px;
    height: 20px;
    border: 1px solid var(--vb-cyan);
    cursor: pointer;
    position: relative;
    border-radius: 0.35rem;
}

.check input:checked{
    background-color: var(--vb-cyan);
}

.check input:checked::before{
    content: "âœ”";
    position: absolute;
    color: var(--dk-text);
    font-size: 1.05rem;
    font-weight: 600;
    left: -3.5px;
    left: 50%;
    transform: translateX(-50%) translateY(2%);
}

.check label{
    color: var(--pl-white);
    font-size: 1.25rem;
    letter-spacing: 0.75px;
}

.slider{
    appearance: none;
    width: 100%;
    height: 0.75rem;
    cursor: pointer;
    background-color: var(--lt-violet);
    border-radius: 1rem;
    margin-top: 2rem;
    margin-bottom: 1.5rem;
    background-image: linear-gradient(var(--vb-violet), var(--vb-violet));
    background-repeat: no-repeat;
    border: none;
    outline: none;
}

.slider::-webkit-slider-thumb{
    position: relative;
    appearance: none;
    height: 2rem;
    width: 2rem;
    border-radius: 50%;
    background-color: var(--vb-yellow);
    cursor: pointer;
    margin-top: -3px;
    box-shadow: 0px 0px 20px 0px rgba(255, 229, 61, 0.50);
    transition: all 100ms ease-in;
}

.slider:focus{
    outline: 3px solid var(--vb-yellow);
}

.slider::-webkit-slider-thumb:hover{
    outline: 2px solid var(--vb-yellow);
    background-color: var(--dk-violet);
    box-shadow: 0px 0px 25px 5px rgba(255, 229, 61, 0.80);
}

.copyBtn{
    background-color: transparent;
    border:none;
    outline:none;
}

.tooltip {
    position: absolute;
    background-color: var(--vb-violet2);
    color: var(--vb-yellow);
    font-size: 1.25rem;
    top: -35px;
    left: -25px;
    padding: 5px 10px;
    border-radius: 1rem;
    opacity: 0;
    transform: scale(0);
    transform-origin: bottom;
    transition: all 250ms ease-in-out;
}
  
.tooltip.active {
opacity: 1;
transform: scale(1);
}

/* Vendor prefixes like `-webkit-` in CSS are used to apply experimental or browser-specific features and properties in a way that won't interfere with other browsers that don't support those features. They were commonly used in the past to deal with inconsistencies in browser implementations. The reasons for using vendor prefixes and why you can't always apply properties directly are as follows:

1. **Browser-Specific Implementations**:
   - Browsers may implement CSS properties and features differently or introduce experimental features before they become part of the standard. Vendor prefixes allow developers to target specific browsers with these experimental or non-standard features.

2. **Testing and Compatibility**:
   - By using vendor prefixes, developers can test and experiment with new features without breaking the rendering in other browsers. This allows for graceful degradation or progressive enhancement, ensuring that web content works on a wide range of browsers.

3. **Prefix Evolution**:
   - Browser vendors introduced prefixes such as `-webkit-` (for WebKit-based browsers like Safari and Chrome), `-moz-` (for Mozilla Firefox), and `-ms-` (for Microsoft Internet Explorer/Edge) to identify experimental features. Over time, some of these features become standardized and may be supported without prefixes.

4. **Standardization Process**:
   - As new features are developed and adopted by the web community, they go through a standardization process with organizations like the World Wide Web Consortium (W3C). Once a feature reaches a stable standard, browser vendors aim to implement it without a prefix.

5. **Cross-Browser Compatibility**:
   - Until a feature becomes widely supported without prefixes, developers need to use different prefixes to target specific browsers and ensure cross-browser compatibility. This means that applying properties common to all browsers directly can lead to inconsistencies.

6. **Gradual Deprecation**:
   - As support for prefixed features matures, browser vendors may deprecate and eventually remove the prefixes. Developers need to update their code to use the standard, non-prefixed versions as browser support improves.

In recent years, there has been a shift toward reducing the reliance on vendor prefixes, as browsers aim to implement standardized features more consistently. Developers are encouraged to check current browser support using compatibility tables and consider whether prefixes are still necessary for specific features.

Additionally, the use of tools like Autoprefixer in build processes can automatically add vendor prefixes based on your project's specified target browser versions, simplifying the management of prefixes while ensuring compatibility. */